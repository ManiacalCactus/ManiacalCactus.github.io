<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-09-04T20:36:22-04:00</updated><id>http://localhost:4000/</id><title type="html">kopitsLabs</title><subtitle>Adventures in electronics, mechanics, software, and whatever other field catches my eye
</subtitle><entry><title type="html">BoardBuddy</title><link href="http://localhost:4000/project/2017/09/04/boardbuddy.html" rel="alternate" type="text/html" title="BoardBuddy" /><published>2017-09-04T21:20:49-04:00</published><updated>2017-09-04T21:20:49-04:00</updated><id>http://localhost:4000/project/2017/09/04/boardbuddy</id><content type="html" xml:base="http://localhost:4000/project/2017/09/04/boardbuddy.html">&lt;p&gt;BoardBuddy is a project which has been sitting in the back of my workbench for months, and the back of my mind for even longer.  The basic problem which it is trying to solve is drawing straight lines on magnetic white boards.  With my involvement in my school’s robotics team, I have found it increasingly important to convey my ideas through concise drawings.  However, I’m pretty bad at drawing straight lines, so I came up with the BoardBuddy.  The general idea of the BoardBuddy is two magnetically attached points with a stiff meter stick connecting them.  I then decided to add bearings on both ends, which could potentially allow the whole device to act as a compass.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/BoardBuddy/Sketch1.JPG&quot; alt=&quot;Earliest Sketch&quot; /&gt;&lt;img src=&quot;/assets/images/BoardBuddy/Sketch2.JPG&quot; alt=&quot;Earliest Sketches&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After I had mostly settled on a design, I went into Fusion 360, my CAD tool of choice because of its parametric design features as well as three year student free trial.  I quickly modeled my designs as I had sketched out, with the small revision that I would be using friction fitting for the bearing as opposed to screws.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/BoardBuddy/BoardBuddyCentral.png&quot; alt=&quot;Fusion Models&quot; /&gt;
  &lt;img src=&quot;/assets/images/BoardBuddy/BoardBuddyAxis.png&quot; alt=&quot;Fusion Models&quot; /&gt;
  &lt;img src=&quot;/assets/images/BoardBuddy/BoardBuddyScrew.png&quot; alt=&quot;Fusion Models&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I moved on to printing.  Although I did not well document the process, I went through about three or four revisions of each part in order to get the fit just right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/BoardBuddy/PostPrint.JPG&quot; alt=&quot;Pictures of Printing&quot; /&gt;
  &lt;img src=&quot;/assets/images/BoardBuddy/Single.JPG&quot; alt=&quot;Final Modules&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After completing the two points of rotation, I moved on to the meter stick itself.  In my initial design, I had the meter stick with one long hole down the center of it. The idea behind this was that I would be able to adjust the position of the points of rotation.  To be completely honest, I have no idea what my intention was there, but just have two defined points of rotation would seem to fulfill all of the functionality which my design goal required while not making the meter stick extremely flimsy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/BoardBuddy/MeterStick.JPG&quot; alt=&quot;Pictures of Milling&quot; /&gt;
  &lt;img src=&quot;/assets/images/BoardBuddy/Milling.JPG&quot; alt=&quot;Pictures of Milling&quot; /&gt;
  &lt;em&gt;My attempts at milling before I realized there was no need&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I then attempted to install the magnets.  However, I ran into an interesting problem: I wanted the magnets to friction fit even while pulling away from a magnetic board while using 3d printed parts.  Since printed parts are so unreliable in nature, I decided that best way would be to melt holes of the exact diameter of the magnets I was using.  This idea was inspired by some brass inserts for m3 screws which I often use in my 3d printed parts.  So, I turned a cylinder of brass of the same diameter of my magnets on the lathe.  In order to remove some of the thermal capacitance, so that it would heat up more quickly, while still allowing some surface to hold, I hollowed out the part.  This allowed me to heat up the brass part with a soldering iron and melt a hole of perfect, precise diameter for the magnets.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/BoardBuddy/BBuddyFinal.JPG&quot; alt=&quot;Final Product&quot; /&gt;
  &lt;img src=&quot;/assets/images/BoardBuddy/OneAxis.JPG&quot; alt=&quot;Final Product&quot; /&gt;
  &lt;em&gt;The final BoardBuddy&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In future revisions or in similar products, I would like to an adjustable marker holder for creating circles.  However, this works for my purposes.  Thanks for reading.&lt;/p&gt;</content><author><name></name></author><summary type="html">BoardBuddy is a project which has been sitting in the back of my workbench for months, and the back of my mind for even longer. The basic problem which it is trying to solve is drawing straight lines on magnetic white boards. With my involvement in my school’s robotics team, I have found it increasingly important to convey my ideas through concise drawings. However, I’m pretty bad at drawing straight lines, so I came up with the BoardBuddy. The general idea of the BoardBuddy is two magnetically attached points with a stiff meter stick connecting them. I then decided to add bearings on both ends, which could potentially allow the whole device to act as a compass. After I had mostly settled on a design, I went into Fusion 360, my CAD tool of choice because of its parametric design features as well as three year student free trial. I quickly modeled my designs as I had sketched out, with the small revision that I would be using friction fitting for the bearing as opposed to screws. I moved on to printing. Although I did not well document the process, I went through about three or four revisions of each part in order to get the fit just right. After completing the two points of rotation, I moved on to the meter stick itself. In my initial design, I had the meter stick with one long hole down the center of it. The idea behind this was that I would be able to adjust the position of the points of rotation. To be completely honest, I have no idea what my intention was there, but just have two defined points of rotation would seem to fulfill all of the functionality which my design goal required while not making the meter stick extremely flimsy. My attempts at milling before I realized there was no need I then attempted to install the magnets. However, I ran into an interesting problem: I wanted the magnets to friction fit even while pulling away from a magnetic board while using 3d printed parts. Since printed parts are so unreliable in nature, I decided that best way would be to melt holes of the exact diameter of the magnets I was using. This idea was inspired by some brass inserts for m3 screws which I often use in my 3d printed parts. So, I turned a cylinder of brass of the same diameter of my magnets on the lathe. In order to remove some of the thermal capacitance, so that it would heat up more quickly, while still allowing some surface to hold, I hollowed out the part. This allowed me to heat up the brass part with a soldering iron and melt a hole of perfect, precise diameter for the magnets. The final BoardBuddy In future revisions or in similar products, I would like to an adjustable marker holder for creating circles. However, this works for my purposes. Thanks for reading.</summary></entry><entry><title type="html">Giant RGB LED Pixels</title><link href="http://localhost:4000/project/2017/09/03/giant-rgb-pixels.html" rel="alternate" type="text/html" title="Giant RGB LED Pixels" /><published>2017-09-03T21:20:49-04:00</published><updated>2017-09-03T21:20:49-04:00</updated><id>http://localhost:4000/project/2017/09/03/giant-rgb-pixels</id><content type="html" xml:base="http://localhost:4000/project/2017/09/03/giant-rgb-pixels.html">&lt;p&gt;For my first project on this new blog i decided that what I make should be a learning experience for me as it would help me better convey what will become the general tone of this site.&lt;/p&gt;

&lt;p&gt;Thusly, I decided that it was time I finally learn how to design and order pcbs.  I have been interested in hobby electronics for several years now, but the extent of my production has all been homebrew.  Such is why I decided I should create something which I can’t manufacture in my workshop, in this case because it would simply be too large of a task.  Since I wanted to focus on learning the process and not the electronics itself, I went with a super simple design, two leds on a board.  Naturally, I still wanted this to serve some purpose, so I decided I would make these boards modular and linkable using headers.  Below are my first sketches of the idea.
  &lt;img src=&quot;/assets/images/GiantPixels/GiantPixelsSchematic.JPG&quot; alt=&quot;First Sketches&quot; /&gt;
  After the initial sketches, I took some time to formalize the design in Fritzing, software made for this purpose.  Although I have made efforts in the past to use Eagle to design pcbs, I have never been successful due largely to the arguably overly complex system and lack of sufficient resources.  So I settled for easier to use CAD tools.
  &lt;img src=&quot;/assets/images/GiantPixels/GiantPixelsDesign.png&quot; alt=&quot;Fritzing&quot; /&gt;
  After creating the boards, I used Fritzing’s integrated service to order my pcbs.  Although I could probably have moved the production to China for much cheaper, I wanted the simplest possible experience for my first run of pcbs, so I want with Aisler.  The first time I uploaded my designs I placed to traces slightly too close to each other, which resulted in them being contiguous.  Luckily I caught this mistake before I spent 50 pounds and two weeks on non functional pcbs.
  &lt;img src=&quot;/assets/images/GiantPixels/GiantPixelsAisler.png&quot; alt=&quot;Aisler&quot; /&gt;
  &lt;img src=&quot;/assets/images/GiantPixels/GiantPixelsBare.JPG&quot; alt=&quot;Bare Boards&quot; /&gt;
  When the 15 boards came two weeks later I spent about 3 hours populating all of them with their leds and headers.  However, on my first test using three potentiometer outputs hookup up to the first three legs of the led and ground on the fourth, I could never get one color to show up, and changing the value of its respective potentiometer would dim the led as a whole.  After some debugging, I realized the reason for this was that when creating the boards I assumed that the farthest out leg would naturally be ground.  This however was not the case; the third and longest leg was ground, so the solution was simply swapping two inputs.
  After testing, I began to write code to cycle through all of the possible colors using an arduino.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinRed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinGreen&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pinBlue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delayAmt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;maximum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updateLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delayAmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;updateLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;analogWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinRed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;analogWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinGreen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;analogWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pinBlue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delayAmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;However, I this code resulted in some very strange behavior: the led would increase wildly for the color green and oscillate while the color blue was much less than it should have been.  I initially assumed that this was an issue with my code, but even after working with a second revision the problem persisted.  I then assumed it was a problem with the leds, or perhaps an overcurrent issue.  However, after retrying the system using mosfets to deliver the power from a 9 volt, I ruled out overcurrent.  Next, I switched the leads of different colors to no avail.  Some further research lead me, strangely enough, to color theory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/c/cc/Absorption_Curves.JPG&quot; alt=&quot;Color Absorption Curves&quot; /&gt;
  By Arturomoncadatorres (Own work) [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons&lt;/p&gt;

&lt;p&gt;It turned out that the fault was not with my materials nor method of using them, but with my eyes.  As seen in this chart, green colors are most easily detected, then red, and then blue.  This perfectly explained my problem; green was the brightest, then red, then blue.  I quickly changed my code to reflect minimums and maximums for each color.  This resulted in the my final product.
  &lt;img src=&quot;/assets/images/GiantPixels/GiantPixelsFinal.JPG&quot; alt=&quot;Final&quot; /&gt;
  Thanks for reading this far.  I had fun with this project, and I hope you took away from it as much as I did.&lt;/p&gt;</content><author><name></name></author><summary type="html">For my first project on this new blog i decided that what I make should be a learning experience for me as it would help me better convey what will become the general tone of this site. Thusly, I decided that it was time I finally learn how to design and order pcbs. I have been interested in hobby electronics for several years now, but the extent of my production has all been homebrew. Such is why I decided I should create something which I can’t manufacture in my workshop, in this case because it would simply be too large of a task. Since I wanted to focus on learning the process and not the electronics itself, I went with a super simple design, two leds on a board. Naturally, I still wanted this to serve some purpose, so I decided I would make these boards modular and linkable using headers. Below are my first sketches of the idea. After the initial sketches, I took some time to formalize the design in Fritzing, software made for this purpose. Although I have made efforts in the past to use Eagle to design pcbs, I have never been successful due largely to the arguably overly complex system and lack of sufficient resources. So I settled for easier to use CAD tools. After creating the boards, I used Fritzing’s integrated service to order my pcbs. Although I could probably have moved the production to China for much cheaper, I wanted the simplest possible experience for my first run of pcbs, so I want with Aisler. The first time I uploaded my designs I placed to traces slightly too close to each other, which resulted in them being contiguous. Luckily I caught this mistake before I spent 50 pounds and two weeks on non functional pcbs. When the 15 boards came two weeks later I spent about 3 hours populating all of them with their leds and headers. However, on my first test using three potentiometer outputs hookup up to the first three legs of the led and ground on the fourth, I could never get one color to show up, and changing the value of its respective potentiometer would dim the led as a whole. After some debugging, I realized the reason for this was that when creating the boards I assumed that the farthest out leg would naturally be ground. This however was not the case; the third and longest leg was ground, so the solution was simply swapping two inputs. After testing, I began to write code to cycle through all of the possible colors using an arduino. int red, green, blue; int *current, *next; int pinRed = 4, pinGreen = 5, pinBlue = 6; int maximum = 255; int delayAmt = 3; void setup() { red = maximum; green = 0; blue = 0; current = &amp;amp;red; next = &amp;amp;green; } void loop() { while(*next &amp;lt; maximum){ *next = *next + 1; *current = *current - 1; updateLED(); delay(delayAmt); } current = next; if(next == &amp;amp;red){ next = &amp;amp;green; }else if(next == &amp;amp;green){ next = &amp;amp;blue; }else if(next == &amp;amp;blue){ next = &amp;amp;red; } } void updateLED(){ analogWrite(pinRed, red); analogWrite(pinGreen, green); analogWrite(pinBlue, blue); delay(delayAmt); } However, I this code resulted in some very strange behavior: the led would increase wildly for the color green and oscillate while the color blue was much less than it should have been. I initially assumed that this was an issue with my code, but even after working with a second revision the problem persisted. I then assumed it was a problem with the leds, or perhaps an overcurrent issue. However, after retrying the system using mosfets to deliver the power from a 9 volt, I ruled out overcurrent. Next, I switched the leads of different colors to no avail. Some further research lead me, strangely enough, to color theory. By Arturomoncadatorres (Own work) [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons It turned out that the fault was not with my materials nor method of using them, but with my eyes. As seen in this chart, green colors are most easily detected, then red, and then blue. This perfectly explained my problem; green was the brightest, then red, then blue. I quickly changed my code to reflect minimums and maximums for each color. This resulted in the my final product. Thanks for reading this far. I had fun with this project, and I hope you took away from it as much as I did.</summary></entry></feed>